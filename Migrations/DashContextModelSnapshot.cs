// <auto-generated />
using Dashboard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using MySql.Data.EntityFrameworkCore.Storage.Internal;
using System;

namespace Dashboard.Migrations
{
    [DbContext(typeof(DashContext))]
    partial class DashContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Dashboard.Models.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created_at");

                    b.Property<string>("name");

                    b.Property<DateTime>("updated_at");

                    b.HasKey("category_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Dashboard.Models.Comment", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UsersId");

                    b.Property<string>("comment");

                    b.Property<DateTime>("created_at");

                    b.Property<int>("message_id");

                    b.Property<DateTime>("updated_at");

                    b.Property<int>("user_id");

                    b.HasKey("comment_id");

                    b.HasIndex("UsersId");

                    b.HasIndex("message_id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Dashboard.Models.Message", b =>
                {
                    b.Property<int>("message_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UsersId");

                    b.Property<DateTime>("created_at");

                    b.Property<string>("message");

                    b.Property<DateTime>("updated_at");

                    b.Property<int>("user_id");

                    b.HasKey("message_id");

                    b.HasIndex("UsersId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Dashboard.Models.Order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UsersId");

                    b.Property<DateTime>("created_at");

                    b.Property<double>("sub_total");

                    b.Property<double>("tax");

                    b.Property<double>("total");

                    b.Property<DateTime>("updated_at");

                    b.Property<int>("user_id");

                    b.HasKey("order_id");

                    b.HasIndex("UsersId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Dashboard.Models.OrdersProducts", b =>
                {
                    b.Property<int>("orders_products_id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("order_id");

                    b.Property<int>("product_id");

                    b.HasKey("orders_products_id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.ToTable("orders_has_products");
                });

            modelBuilder.Entity("Dashboard.Models.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("created_at");

                    b.Property<string>("desc");

                    b.Property<string>("image");

                    b.Property<string>("name");

                    b.Property<double>("price");

                    b.Property<int>("qty");

                    b.Property<string>("short_desc");

                    b.Property<DateTime>("updated_at");

                    b.Property<double>("weight");

                    b.HasKey("product_id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Dashboard.Models.ProductsCategories", b =>
                {
                    b.Property<int>("products_categories_id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("category_id");

                    b.Property<int>("product_id");

                    b.HasKey("products_categories_id");

                    b.HasIndex("category_id");

                    b.HasIndex("product_id");

                    b.ToTable("products_has_categories");
                });

            modelBuilder.Entity("Dashboard.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("address");

                    b.Property<string>("city");

                    b.Property<DateTime>("created_at");

                    b.Property<string>("email");

                    b.Property<string>("first_name");

                    b.Property<string>("last_name");

                    b.Property<string>("password");

                    b.Property<string>("phone");

                    b.Property<string>("state");

                    b.Property<DateTime>("updated_at");

                    b.Property<int>("user_id");

                    b.Property<string>("zip");

                    b.HasKey("Id");

                    b.HasAlternateKey("user_id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Dashboard.Models.Comment", b =>
                {
                    b.HasOne("Dashboard.Models.User", "Users")
                        .WithMany("Comments")
                        .HasForeignKey("UsersId");

                    b.HasOne("Dashboard.Models.Message", "Messages")
                        .WithMany("Comments")
                        .HasForeignKey("message_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dashboard.Models.Message", b =>
                {
                    b.HasOne("Dashboard.Models.User", "Users")
                        .WithMany("Messages")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Dashboard.Models.Order", b =>
                {
                    b.HasOne("Dashboard.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Dashboard.Models.OrdersProducts", b =>
                {
                    b.HasOne("Dashboard.Models.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dashboard.Models.Product", "Products")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dashboard.Models.ProductsCategories", b =>
                {
                    b.HasOne("Dashboard.Models.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dashboard.Models.Product", "Products")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dashboard.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dashboard.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dashboard.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dashboard.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
